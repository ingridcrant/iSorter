[{"/Users/ingridcrant/code/react-flask-app/src/App.js":"1","/Users/ingridcrant/code/react-flask-app/src/reportWebVitals.js":"2","/Users/ingridcrant/code/react-flask-app/src/index.js":"3","/Users/ingridcrant/code/react-flask-app/src/CheckBox.js":"4"},{"size":9246,"mtime":1619901053959,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1610809426818,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1610916825938,"results":"8","hashOfConfig":"6"},{"size":4254,"mtime":1619901337653,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1tfv2f4",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/ingridcrant/code/react-flask-app/src/App.js",["19","20"],"/Users/ingridcrant/code/react-flask-app/src/reportWebVitals.js",[],"/Users/ingridcrant/code/react-flask-app/src/index.js",[],"/Users/ingridcrant/code/react-flask-app/src/CheckBox.js",["21"],"import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst CheckboxLabel = styled.label`\n  margin-top: 5px;\n  margin-bottom: 5px;\n  margin-right: 50px;\n`;\nconst Button = styled.button`\n  font-family: 'Montserrat', sans-serif;\n  background: white;\n  border-radius: 3px;\n  border: 3px solid #00b1cc;\n  background-color: #121640;\n  color: #ee3ec9;\n  margin-top: 40px;\n  margin-bottom: 40px;\n  padding: 0.25em 1em;\n  font-size: 20px;\n  border-radius: 8px;\n`;\nconst HomeStyles = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: #121640;\n  ${Button}:hover {\n    background-color: #1b215f;\n  }\n  ....\n`;\nconst HomeStylesLeftAlign = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  color: #ff0080;\n`;\n\nconst Checkbox = ({ type = 'checkbox', name, checked, onChange }) => (\n    <input type={type} name={name} checked={checked} onChange={onChange} />\n);\n    \nCheckbox.propTypes = {\n    type: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    onChange: PropTypes.func.isRequired,\n}\n    \nclass CheckboxContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            checkedItems: new Map(),\n            pressed: false,\n            successful: false\n        }\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.postPlaylists = this.postPlaylists.bind(this);\n    }\n    \n    postPlaylists() {\n        this.setState({pressed: true});\n    \n        const checkedItems = this.state.checkedItems;\n        const propItems = this.props.checkboxes;\n        var data = {}\n    \n        var checkedPlaylists = {};\n    \n        for (const playlist of Object.entries(propItems)) {\n            if(checkedItems.get(playlist[1].name)){\n                checkedPlaylists[playlist[1].name] = playlist[1].data;\n            }\n        }\n        \n        data.playlists = checkedPlaylists;\n        data.token = this.props.userToken;\n        var string = JSON.stringify(data);\n    \n        // POST\n        fetch('/post_playlists', {\n            // Declare what type of data we're sending\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            // Specify the method\n            method: 'POST',\n            // A JSON payload\n            body: string\n        }).then(function (response) { // At this point, Flask has printed our JSON\n            return response.text();\n        }).then(function (text) {\n            console.log('POST response: ');\n            // Should be 'OK' if everything was successful\n            console.log(text);\n            this.setState({successful: true});\n        }.bind(this));\n    }\n  \n    handleChange(e) {\n        const item = e.target.name;\n        const isChecked = e.target.checked;\n        this.setState(prevState => ({ checkedItems: prevState.checkedItems.set(item, isChecked) }));\n    }\n  \n    render() {\n        return (\n            <div>\n            {!this.state.pressed && !this.state.successful && (\n            <React.Fragment>\n                <HomeStyles>\n                    <HomeStylesLeftAlign>\n                        {\n                        this.props.checkboxes.map(item => (\n                            <CheckboxLabel key={item.name}>\n                                <Checkbox name={item.name} checked={this.state.checkedItems.get(item.name)} onChange={this.handleChange}/>\n                                <strong>{item.name+\": \"}</strong>{item.length+\" songs\"}\n                            </CheckboxLabel>\n                        ))\n                        }\n                    </HomeStylesLeftAlign>\n                    <Button onClick={this.postPlaylists}>\n                        Create Playlists\n                    </Button>\n                </HomeStyles>\n            </React.Fragment>\n            )}\n            {this.state.pressed && !this.state.successful && (\n                <p class=\"loading\">Creating playlists</p>\n            )}\n            {this.state.successful && (\n                <p>Success!</p>\n            )}\n        </div>\n        );\n    }\n}\n\nexport default CheckboxContainer;\n",{"ruleId":"22","severity":1,"message":"23","line":2,"column":8,"nodeType":"24","messageId":"25","endLine":2,"endColumn":17},{"ruleId":"26","severity":1,"message":"27","line":200,"column":17,"nodeType":"28","endLine":205,"endColumn":18},{"ruleId":"22","severity":1,"message":"29","line":1,"column":16,"nodeType":"24","messageId":"25","endLine":1,"endColumn":25},"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used."]